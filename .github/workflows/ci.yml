name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  MIN_COVERAGE: 75

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy
        pip install -r requirements.txt
    
    - name: Run Black (formatting check)
      run: black --check src/ tests/
      continue-on-error: true
    
    - name: Run Flake8 (linting)
      run: flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503,E501
      continue-on-error: true
    
    - name: Run MyPy (type checking)
      run: mypy src/ --ignore-missing-imports
      continue-on-error: true

  test:
    name: Tests (Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.11']
        # Can add more versions later: ['3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          build-essential \
          libssl-dev \
          libffi-dev \
          python3-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock
    
    - name: Create test directories
      run: |
        mkdir -p profiles/test_profile
        mkdir -p logs
        mkdir -p cache/metadata
        mkdir -p data
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --tb=short --cov=src --cov-report=xml --cov-report=term
      continue-on-error: false
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --tb=short --skip-slow
      continue-on-error: true
      timeout-minutes: 15
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Generate coverage report
      run: |
        pytest tests/ --cov=src --cov-report=html --cov-report=term-missing
      continue-on-error: true
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/
        retention-days: 7

  test-windows:
    name: Tests (Windows)
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock
    
    - name: Create test directories
      run: |
        New-Item -ItemType Directory -Force -Path profiles\test_profile
        New-Item -ItemType Directory -Force -Path logs
        New-Item -ItemType Directory -Force -Path cache\metadata
        New-Item -ItemType Directory -Force -Path data
      shell: pwsh
    
    - name: Run unit tests (Windows)
      run: pytest tests/unit/ -v --tb=short --skip-slow
      continue-on-error: true
      timeout-minutes: 10

  build-check:
    name: Build Verification
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Verify imports
      run: |
        python -c "import src; print('✓ Core imports successful')"
        python -c "from src.core.user_profile_manager import get_profile_manager; print('✓ Profile manager OK')"
        python -c "from src.core.duckdb_database import DuckDBJobDatabase; print('✓ DuckDB OK')"
    
    - name: Check main.py syntax
      run: python -m py_compile main.py
    
    - name: Verify project structure
      run: |
        test -f main.py || exit 1
        test -d src/ || exit 1
        test -d tests/ || exit 1
        test -f requirements.txt || exit 1
        echo "✓ Project structure verified"

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest pytest-benchmark
    
    - name: Run performance tests
      run: |
        pytest tests/performance/ -v --tb=short
      continue-on-error: true
      timeout-minutes: 10

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [lint, test, test-windows, build-check]
    if: always()
    
    steps:
    - name: Check results
      run: |
        echo "## CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- Lint: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Tests (Ubuntu): ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Tests (Windows): ${{ needs.test-windows.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Build Check: ${{ needs.build-check.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Pipeline completed" >> $GITHUB_STEP_SUMMARY
